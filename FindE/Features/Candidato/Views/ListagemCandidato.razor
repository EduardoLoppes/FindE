@page "/ListagemCandidato"
@using FindE.Features.Candidato.Models
@inject IToastService toastService
@inject FindE.Features.Candidato.Services.CandidatoService candidatoService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<div>
    <div class="container-fluid" style="padding: 5px">
        <div class="row g-2">
            <div class="col-md-4">
                <h4>Candidatos cadastrados</h4>
            </div>
            <div class="col-md-4">
                <input @bind=filtroCandidato onkeyup="if (event.keyCode == 13) document.getElementById('btnPesquisarCandidato').click()" type="text" class="form-control" placeholder="Nome">
            </div>
            <div class="col-md-2">
                <button class="btn btn-outline-primary" type="button" id="btnPesquisarCandidato" @onclick="() => PesquisarCandidatos()">Pesquisar</button>
            </div>
            <div class="col-md-2">
                <button class="btn btn-success float-md-end" type="button" @onclick="() => InserirCandidato()">Inserir</button>
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Data Candidatura</th>
                            <th>Formação Acadêmica</th>
                            <th>Status da Formação</th>
                            <th>Data da Formação</th>
                            <th>Usuário GitHub</th>
                            <th>Usuário Instagram</th>
                            <th>Whatsapp</th>
                            <th>Anexos</th>
                            <th><span class="float-sm-end">Ações</span></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (candidatos.Any())
                        {
                            @foreach (var candidato in candidatos)
                            {
                                <tr>
                                    <td class="align-middle">@candidato.Id</td>
                                    <td class="align-middle">@candidato.DataDaCandidatura</td>
                                    <td class="align-middle">@candidato.FormacaoAcademica</td>
                                    <td class="align-middle">@candidato.StatusFomacao</td>
                                    <td class="align-middle">@candidato.DataDaFormacao</td>
                                    <td class="align-middle">@candidato.UsuarioGitHub</td>
                                    <td class="align-middle">@candidato.UsuarioInstagram</td>
                                    <td class="align-middle">@candidato.Anexo</td>
                                    <td>
                                        <div class="float-sm-end">
                                            <button type="button" class="btn btn-primary btn-sm" title="Alterar candidato" @onclick="() => AlterarCandidato(candidato.Id)">
                                                <div class="bi bi-pencil"></div>
                                            </button>
                                            <button type="button" class="btn btn-danger btn-sm" title="Apagar candidato" @onclick="() => ApagarCandidato(candidato)">
                                                <div class="bi bi-trash"></div>
                                            </button>
                                        </div>
                                    </td>
                                </tr>

                            }
                        }
                        else
                        {
                            <tr><td colspan="8"><strong>Nenhum candidato cadastrado.</strong></td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div>
            <div class="hint-text">Exibindo <b>@candidatos.Count()</b> candidatos.</div>
        </div>
    </div>
</div>

@code {
    IEnumerable<CandidatoModel> candidatos = new List<CandidatoModel>();
    string filtroCandidato = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ListarCandidato();
    }

    private async Task ListarCandidato()
    {
        try
        {
            candidatos = await candidatoService.ListarCandidato();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Erro ao buscar candidatos");
        }
    }

    private async void PesquisarCandidatos()
    {
        if (string.IsNullOrWhiteSpace(filtroCandidato))
        {
            await ListarCandidato();
        }
        else
        {
            candidatos = candidatos.Where(p => p.Estagiario.Nome.ToLower().Contains(filtroCandidato.ToLower())).ToList();
        }
    }

    private void InserirCandidato()
    {
        navigationManager.NavigateTo("/CadastroCandidato");
    }

    private void AlterarCandidato(int IdCandidato)
    {
        navigationManager.NavigateTo($"/CadastroCandidato/{IdCandidato}");
    }

    private async Task ApagarCandidato(CandidatoModel candidato)
    {
        if (await jsRuntime.InvokeAsync<bool>("confirm", $"Excluir o candidato {candidato.Estagiario.Nome}?"))
        {
            string resposta = await jsRuntime.InvokeAsync<string>("prompt", $"Confirme o nome do candidato para excluir ({candidato.Estagiario.Nome}):");

            if (candidato.Estagiario.Nome.Equals(resposta))
            {
                await candidatoService.ApagarCandidato(candidato);
                toastService.ShowSuccess("Candidato apagado com sucesso", "Atenção");
                await ListarCandidato();
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", @"O candidato informado não coincide com o estagiário cadastrado. Portanto ele não será excluído.");
            }
        }
    }
}
