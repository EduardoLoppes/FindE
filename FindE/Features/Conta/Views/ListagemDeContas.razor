@page "/ListagemDeContas"
@using FindE.Features.Conta.Models
@inject IToastService toastService
@inject FindE.Features.Conta.Services.ContaService contaService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

@if (contas == null)
{
    <p><div class="spinner-border text-primary m-1" role="status"></div>Carregando contas...</p>
}
else
{
    <div>
        <nav class="navbar navbar-expand-md bg-gradientsticky-top shadow-sm" style="background-color: #006666;">
            <div class="navbar-brand text-white container-fluid" style="padding: 10px;">Contas</div>
            <button class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </nav>
        <div class="container-fluid border rounded" style="padding: 5px">
            <div class="row">
                <div class="col-4" style="padding-right: 2px">
                    <input @bind=filtroConta onkeyup="if (event.keyCode == 13) document.getElementById('btnPesquisarConta').click()" type="text" class="form-control" placeholder="Usuário">
                </div>
                <div class="col-2">
                    <button class="btn btn-outline-primary" type="button" id="btnPesquisarConta" @onclick="() => PesquisarNaListagem()">Pesquisar</button>
                </div>
                <div class="col-2">
                    <button class="btn btn-success" type="button" id="btnInserirConta" @onclick="() => InserirConta()">Nova conta</button>
                </div>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-sm table-striped table-hover">
                <thead>
                    <tr>
                        <th style="width: 80px" , valign="middle">Id</th>
                        <th>Usuário</th>
                        <th class="thBadgeCustom">Perfil</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @if (contas.Any())
                    {
                        @foreach (var conta in contas)
                        {
                            <tr>
                                <td class="align-middle">@conta.Id</td>
                                <td class="align-middle">@conta.Usuario</td>
                                @if ((int)conta.Perfil == 1)
                                {
                                    <td class="tdBadgeCustom"><span class="badge bg-warning text-white">Empresa</span></td>
                                }
                                else if ((int)conta.Perfil == 2)
                                {
                                    <td class="tdBadgeCustom"><span class="badge bg-success text-white">Estagiário</span></td>
                                }
                                else
                                {
                                    <td class="tdBadgeCustom"><span class="badge bg-dark text-white">Administrador</span></td>
                                }
                                <td class="align-middle">
                                    <button type="button" class="btn btn-primary btn-sm"
                                data-toggle="tooltip" data-placement="left" title="Alterar conta" @onclick="() => AlterarConta(conta)">
                                        <div class="bi bi-pencil"></div>
                                    </button>
                                    <button type="button" class="btn btn-danger btn-sm"
                                data-toggle="tooltip" data-placement="left" title="Apagar conta" @onclick="() => ApagarConta(conta)">
                                        <div class="bi bi-trash"></div>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr><td colspan="6"><strong>Nenhuma conta cadastrada.</strong></td></tr>
                    }
                </tbody>
            </table>
        </div>
        <div>
            <div class="hint-text">Exibindo as últimas <b>@contas.Count()</b> contas.</div>
        </div>
    </div>
}

@code {

    private bool _collapseNavMenu = true;

    private string NavMenuCssClass => _collapseNavMenu ? "collapse navbar-collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    IEnumerable<ContaModel> contas;
    string filtroConta;

    protected override async Task OnInitializedAsync()
    {
        contas = new List<ContaModel>();
        await ListarContas();
    }

    private async Task ListarContas()
    {
        try
        {
            contas = await contaService.ListarContas();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Erro ao buscar contas");
        }
    }

    private async void PesquisarNaListagem()
    {
        if (string.IsNullOrWhiteSpace(filtroConta))
        {
            await ListarContas();
        }
        else
        {
            contas = contas.Where(p => p.Usuario.ToLower().Contains(filtroConta.ToLower())).ToList();
        }
    }

    private void InserirConta()
    {
        navigationManager.NavigateTo("/CadastroDeConta");
    }

    private async Task AlterarConta(ContaModel conta)
    {
        await contaService.AlterarConta(conta);
        await ListarContas();
    }

    private async Task ApagarConta(ContaModel conta)
    {
        //await jsRuntime.InvokeVoidAsync("alert", "Atenção!");
        //string prompted = await jsRuntime.InvokeAsync<string>("prompt", $"Confirme o nome do usuário para excluir ({conta.Usuario}):");

        if (await jsRuntime.InvokeAsync<bool>("confirm", $"Excluir a conta do usuário {conta.Usuario}?"))
        {
            await contaService.ApagarConta(conta);
            await ListarContas();
        }
    }
}
