@page "/ListagemDeContas"
@using FindE.Features.Conta.Models
@inject IToastService toastService
@inject FindE.Features.Conta.Services.ContaService contaService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<div>
    <div class="container-fluid">
        <div class="row g-2">
            <div class="col-md-4">
                <h4>Contas de acesso ao sistema</h4>
            </div>
            <div class="col-md-4">
                <input @bind=filtroConta onkeyup="if (event.keyCode == 13) document.getElementById('btnPesquisarConta').click()" type="text" class="form-control" placeholder="Usuário">
            </div>
            <div class="col-md-2">
                <button class="btn btn-outline-primary" type="button" id="btnPesquisarConta" @onclick="() => PesquisarNaListagem()">Pesquisar</button>
            </div>
            <div class="col-md-2">
                <button class="btn btn-success float-md-end" type="button" id="btnInserirConta" @onclick="() => InserirConta()">Inserir</button>
            </div>
        </div>
    </div>
    <div class="table-responsive-sm" style="padding-top: 8px;">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Usuário</th>
                    <th class="thBadgeCustom">Perfil</th>
                    <th><span class="float-sm-end">Ações</span></th>
                </tr>
            </thead>
            <tbody>
                @if (contas.Any())
                {
                    @foreach (var conta in contas)
                    {
                        <tr>
                            <td class="align-middle">@conta.Id</td>
                            <td class="align-middle">@conta.Usuario</td>
                            @if ((int)conta.Perfil == 1)
                            {
                                <td class="tdBadgeCustom"><span class="badge bg-warning text-white">Empresa</span></td>
                            }
                            else if ((int)conta.Perfil == 2)
                            {
                                <td class="tdBadgeCustom"><span class="badge bg-success text-white">Estagiário</span></td>
                            }
                            else
                            {
                                <td class="tdBadgeCustom"><span class="badge bg-dark text-white">Administrador</span></td>
                            }
                            <td>
                                <div class="float-sm-end">
                                    <button type="button" class="btn btn-primary btn-sm" title="Alterar conta" @onclick="() => AlterarConta(conta.Id)">
                                        <div class="bi bi-pencil"></div>
                                    </button>
                                    <button type="button" class="btn btn-danger btn-sm" title="Apagar conta" @onclick="() => ApagarConta(conta)">
                                        <div class="bi bi-trash"></div>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="4"><strong>Nenhuma conta cadastrada.</strong></td></tr>
                }
            </tbody>
        </table>
    </div>
    <div>
        <div class="hint-text">Exibindo <b>@contas.Count()</b> contas.</div>
    </div>
</div>

@code {
    IEnumerable<ContaModel> contas = new List<ContaModel>();
    string filtroConta = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ListarContas();
    }

    private async Task ListarContas()
    {
        try
        {
            contas = await contaService.ListarContas();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Erro ao buscar contas");
        }
    }

    private async void PesquisarNaListagem()
    {
        if (string.IsNullOrWhiteSpace(filtroConta))
        {
            await ListarContas();
        }
        else
        {
            contas = contas.Where(p => p.Usuario.ToLower().Contains(filtroConta.ToLower())).ToList();
        }
    }

    private void InserirConta()
    {
        navigationManager.NavigateTo("/CadastroDeConta");
    }

    private void AlterarConta(int IdConta)
    {
        navigationManager.NavigateTo($"/CadastroDeConta/{IdConta}");
    }

    private async Task ApagarConta(ContaModel conta)
    {
        if (await jsRuntime.InvokeAsync<bool>("confirm", $"Excluir a conta do usuário {conta.Usuario}?"))
        {
            string resposta = await jsRuntime.InvokeAsync<string>("prompt", $"Confirme o nome do usuário para excluir ({conta.Usuario}):");

            if (conta.Usuario.Equals(resposta))
            {
                await contaService.ApagarConta(conta);
                toastService.ShowSuccess("Conta apagada com sucesso", "Atenção");
                await ListarContas();
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", @"O usuário informado não coincide com o usuário da conta.
Portanto ele não será excluído.");
            }
        }
    }
}
