@page "/ListagemDeEducadores"
@using FindE.Features.Educador.Models
@inject IToastService toastService
@inject FindE.Features.Educador.Services.EducadorService educadorService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<div>
    <div class="container-fluid style=" style="padding: 5px">
        <div class="row g-2">
            <div class="col-md-4">
                <h5>Educadores cadastrados</h5>
            </div>
            <div class="col-md-4">
                <input @bind=filtroEducador onkeyup="if (event.keyCode == 13) document.getElementById('btnPesquisarEducador').click()" type="text" class="form-control" placeholder="Nome">
            </div>
            <div class="col-md-2">
                <button class="btn btn-outline-primary" type="button" id="btnPesquisarEducador" @onclick="() => PesquisarNaListagem()">Pesquisar</button>
            </div>
            <div class="col-md-2">
                <button class="btn btn-success float-md-end" type="button" @onclick="() => InserirEducador()">Inserir</button>
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Nome</th>
                            <th>Mini bio</th>
                            <th><span class="float-sm-end">Ações</span></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (educadores.Any())
                        {
                            @foreach (var educador in educadores)
                            {
                                <tr>
                                    <td class="align-middle">@educador.Id</td>
                                    <td class="align-middle">@educador.Nome</td>
                                    <td>@educador.MiniBio</td>
                                    <td>
                                        <div class="float-sm-end">
                                            <button type="button" class="btn btn-primary btn-sm" title="Alterar educador" @onclick="() => AlterarEducador(educador.Id)">
                                                <div class="bi bi-pencil"></div>
                                            </button>
                                            <button type="button" class="btn btn-danger btn-sm" title="Apagar educador" @onclick="() => ApagarEducador(educador)">
                                                <div class="bi bi-trash"></div>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="4"><strong>Nenhum educador cadastrado.</strong></td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div>
            <div class="hint-text">Exibindo <b>@educadores.Count()</b> educadores.</div>
        </div>
    </div>
</div>

@code {
    IEnumerable<EducadorModel> educadores = new List<EducadorModel>();
    string filtroEducador = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ListarEducadores();
    }

    private async Task ListarEducadores()
    {
        try
        {
            educadores = await educadorService.ListarEducadores();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message, "Erro ao buscar educadores");
        }
    }

    private async void PesquisarNaListagem()
    {
        if (string.IsNullOrWhiteSpace(filtroEducador))
        {
            await ListarEducadores();
        }
        else
        {
            educadores = educadores.Where(p => p.Nome.ToLower().Contains(filtroEducador.ToLower())).ToList();
        }
    }

    private void InserirEducador()
    {
        navigationManager.NavigateTo("/CadastroDeEducador");
    }

    private void AlterarEducador(int IdEducador)
    {
        navigationManager.NavigateTo($"/CadastroDeEducador/{IdEducador}");
    }

    private async Task ApagarEducador(EducadorModel educador)
    {
        if (await jsRuntime.InvokeAsync<bool>("confirm", $"Excluir o educador {educador.Nome}?"))
        {
            string resposta = await jsRuntime.InvokeAsync<string>("prompt", $"Confirme o nome do educador para excluir ({educador.Nome}):");

            if (educador.Nome.Equals(resposta))
            {
                await educadorService.ApagarEducador(educador);
                toastService.ShowSuccess("Educador apagado com sucesso", "Atenção");
                await ListarEducadores();
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", @"O educador informado não coincide com o educador cadastrado.
Portanto ele não será excluído.");
            }
        }
    }
}
